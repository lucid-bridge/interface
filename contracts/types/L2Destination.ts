/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace L2Destination {
  export type TransferDataStruct = {
    tokenAddress: PromiseOrValue<string>;
    destination: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    feeRampup: PromiseOrValue<BigNumberish>;
  };

  export type TransferDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenAddress: string;
    destination: string;
    amount: BigNumber;
    fee: BigNumber;
    startTime: BigNumber;
    feeRampup: BigNumber;
  };
}

export interface L2DestinationInterface extends utils.Interface {
  functions: {
    "buy((address,address,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "changeOwner((address,address,uint256,uint256,uint256,uint256),uint256,address)": FunctionFragment;
    "getLPFee((address,address,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "remoteRootExists(bytes32)": FunctionFragment;
    "transferOwners(bytes32)": FunctionFragment;
    "withdraw((address,address,uint256,uint256,uint256,uint256),uint256,bytes32,uint256,bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buy"
      | "changeOwner"
      | "getLPFee"
      | "remoteRootExists"
      | "transferOwners"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [L2Destination.TransferDataStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [
      L2Destination.TransferDataStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPFee",
    values: [L2Destination.TransferDataStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteRootExists",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwners",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      L2Destination.TransferDataStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLPFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remoteRootExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "TransferBought(address,address,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransferBought"): EventFragment;
}

export interface TransferBoughtEventObject {
  tokenAddress: string;
  destination: string;
  amount: BigNumber;
  fee: BigNumber;
  startTime: BigNumber;
  feeRampup: BigNumber;
  transferID: BigNumber;
  buyer: string;
}
export type TransferBoughtEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  TransferBoughtEventObject
>;

export type TransferBoughtEventFilter = TypedEventFilter<TransferBoughtEvent>;

export interface L2Destination extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2DestinationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLPFee(
      transferData: L2Destination.TransferDataStruct,
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    remoteRootExists(
      rootHashKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      stateRoot: PromiseOrValue<BytesLike>,
      branchMask: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buy(
    transferData: L2Destination.TransferDataStruct,
    transferID: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeOwner(
    transferData: L2Destination.TransferDataStruct,
    transferID: PromiseOrValue<BigNumberish>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLPFee(
    transferData: L2Destination.TransferDataStruct,
    currentTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  remoteRootExists(
    rootHashKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwners(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    transferData: L2Destination.TransferDataStruct,
    transferID: PromiseOrValue<BigNumberish>,
    stateRoot: PromiseOrValue<BytesLike>,
    branchMask: PromiseOrValue<BigNumberish>,
    siblings: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLPFee(
      transferData: L2Destination.TransferDataStruct,
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remoteRootExists(
      rootHashKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      stateRoot: PromiseOrValue<BytesLike>,
      branchMask: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TransferBought(address,address,uint256,uint256,uint256,uint256,uint256,address)"(
      tokenAddress?: PromiseOrValue<string> | null,
      destination?: null,
      amount?: null,
      fee?: null,
      startTime?: null,
      feeRampup?: null,
      transferID?: null,
      buyer?: PromiseOrValue<string> | null
    ): TransferBoughtEventFilter;
    TransferBought(
      tokenAddress?: PromiseOrValue<string> | null,
      destination?: null,
      amount?: null,
      fee?: null,
      startTime?: null,
      feeRampup?: null,
      transferID?: null,
      buyer?: PromiseOrValue<string> | null
    ): TransferBoughtEventFilter;
  };

  estimateGas: {
    buy(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeOwner(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLPFee(
      transferData: L2Destination.TransferDataStruct,
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remoteRootExists(
      rootHashKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      stateRoot: PromiseOrValue<BytesLike>,
      branchMask: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLPFee(
      transferData: L2Destination.TransferDataStruct,
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remoteRootExists(
      rootHashKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      transferData: L2Destination.TransferDataStruct,
      transferID: PromiseOrValue<BigNumberish>,
      stateRoot: PromiseOrValue<BytesLike>,
      branchMask: PromiseOrValue<BigNumberish>,
      siblings: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
